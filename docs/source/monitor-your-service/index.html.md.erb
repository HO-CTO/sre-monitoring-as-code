---
title: Monitor your service
weight: 40
---

# Monitor your service

Following the design principle of "Hierarchical dashboards with drill-downs to the next level" <sup>1</sup>, we have developed a five tier dashboard structure to fulfil different persona needs as follows: -

| Dashboard            | Description                                                                                                          | Persona / User           | Dashboard Title  |
| ---------------------| ---------------------------------------------------------------------------------------------------------------------|--------------------------|----------------------------------------------------------|
| Overview             | Observability of all products and tenants running on a platform.                                                     | Service Manager          | SRE MaC / Overview                                       |
| Product View         | Observability of all the user journeys running on an individual product.                                             | Product Manager and Team | SRE MaC / {Product Name}                                 |
| User Journey View    | Observability of all the SLIs in a single user journey.                                                              | Product Manager and Team | SRE MaC / {Product Name} / {User Journey Name}           |
| Detail View          | Observability of all whitebox and blackbox metrics which contribute to SLIs and Service Health. For troubleshooting. | Engineers | detail-view  | SRE MaC / {Product Name} / {User Journey Name} / Detail  |

These hierarchical dashboards support a generic troubleshooting workflow: -

## Dashboard Design Principles

* Methodical dashboards according to an SLI/SLO strategy.
* Hierarchical dashboards with drill-downs to the next level.
* Actively reduce sprawl.
    * Regularly review existing dashboards to make sure they are still relevant.
    * Only approved dashboards added to master dashboard list.
    * Tracking dashboard use.
* Scripting libraries to generate dashboards, ensure consistency in pattern and style. grafonnet (Jsonnet)
    * No editing in the browser. Dashboard viewers change views with variables.
* Browsing for dashboards is the exception, not the rule.
* Perform experimentation and testing on a feature branch (consider nonprod environment to be production).
* Expressive charts with meaningful use of colour and normalising axes where you can.
    * Example of meaningful colour: Blue means it’s good, red means it’s bad. Thresholds can help with that.
    * Example of normalising axes: When comparing CPU usage, measure by percentage rather than raw number, because machines can have a different number of cores. Normalising CPU usage by the number of cores reduces cognitive load because the viewer can trust that at 100% all cores are being used, without having to know the number of CPUs.





