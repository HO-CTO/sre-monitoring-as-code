name: 'build-container-image'

on:
  workflow_call:
    inputs:
      image-registry:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-build-context:
        required: true
        type: string
      repository-name:
        required: true
        type: string

jobs:
  container-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Calculate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.image-registry }}/${{ inputs.image-name }}
          tags: |
            type=raw,value=${{ github.sha }}
      - name: Build container
        uses: docker/build-push-action@v3.2.0
        with:
          context: ${{ inputs.image-build-context }}
          file:  ${{ inputs.image-build-context }}/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }}
            MAC_VERSION='#${{ github.event.number }}'
          outputs: type=docker,dest=/tmp/${{ inputs.repository-name }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ inputs.repository-name }}
          path: /tmp/${{ inputs.repository-name }}.tar

  container-image-test:
    needs: container-image-build
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Download artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ inputs.repository-name }}
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/${inputs.repository-name}.tar
          docker image ls
          echo "IMAGE_TAG=$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep ${inputs.repository-name})" >> $GITHUB_ENV
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.10.0
      - name: Setup Snyk
        run: |
          npm install snyk -g
          snyk auth ${{secrets.SNYK_TOKEN}}
      - name: Snyk Container Scan
        id: snyk-dockerfile
        run: |
          snyk container test --file=${inputs.image-build-context}/Dockerfile --sarif-file-output=snyk.sarif --app-vulns --severity-threshold=medium ${{ env.IMAGE_TAG }}
        continue-on-error: true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: Check on failures
        if: steps.snyk-dockerfile.outcome != 'success'
        run: exit 1